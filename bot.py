import logging
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
from datetime import datetime, timedelta

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
(
    STEP_DATE, STEP_NAMES, STEP_PLACES, STEP_TIME,
    STEP_PERFORMANCE_SELECT, STEP_REVIEW_TEXT, STEP_SOURCE, STEP_ASSOCIATIONS, STEP_USER_NAME
) = range(9)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

import os
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today")],
        [InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data="yesterday")]
    ]
    await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤–∏–∑–∏—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    return STEP_DATE

async def date_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["date"] = (
        datetime.now().strftime("%d.%m.%Y") if query.data == "today"
        else (datetime.now() - timedelta(days=1)).strftime("%d.%m.%Y")
    )
    await query.edit_message_text("üë• –í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –≥–æ—Å—Ç–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –ü—ç—Ä—Ä–∏–Ω–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏):")
    return STEP_NAMES

async def names_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["names"] = update.message.text.strip()
    places_keyboard = [
        [InlineKeyboardButton(p, callback_data=p)] for p in
        ["1/2", "3/4", "5/6", "7/8", "9/10", "11/12", "13/14", "15/16", "17/18", "19/20"]
    ]
    await update.message.reply_text("üìç –í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ –≥–æ—Å—Ç–∏ —Å–∏–¥–µ–ª–∏:", reply_markup=InlineKeyboardMarkup(places_keyboard))
    return STEP_PLACES

async def places_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["places"] = query.data

    time_keyboard = [
        [InlineKeyboardButton("13:30", callback_data="13:30")],
        [InlineKeyboardButton("17:00", callback_data="17:00")],
        [InlineKeyboardButton("20:30", callback_data="20:30")]
    ]
    await query.edit_message_text("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–∏—Å–∞:", reply_markup=InlineKeyboardMarkup(time_keyboard))
    return STEP_TIME

async def time_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["time"] = query.data

    show_keyboard = [
        [InlineKeyboardButton("IF", callback_data="IF")],
        [InlineKeyboardButton("IA", callback_data="IA")],
        [InlineKeyboardButton("IR", callback_data="IR")]
    ]
    await query.edit_message_text("üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ–∫—Ç–∞–∫–ª—å:", reply_markup=InlineKeyboardMarkup(show_keyboard))
    return STEP_PERFORMANCE_SELECT

async def performance_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["performance"] = query.data
    await query.edit_message_text("üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –æ —Å–ø–µ–∫—Ç–∞–∫–ª–µ:")
    return STEP_REVIEW_TEXT

async def review_text_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["review_text"] = update.message.text.strip()

    source_keyboard = [
        [InlineKeyboardButton("–£–∂–µ –±—ã–ª–∏ —É –Ω–∞—Å —Ä–∞–Ω–µ–µ", callback_data="–£–∂–µ –±—ã–ª–∏ —É –Ω–∞—Å —Ä–∞–Ω–µ–µ")],
        [InlineKeyboardButton("–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ –∑–Ω–∞–∫–æ–º—ã–µ", callback_data="–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ –∑–Ω–∞–∫–æ–º—ã–µ")],
        [InlineKeyboardButton("–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", callback_data="–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏")],
        [InlineKeyboardButton("–ü–æ–¥–∞—Ä–∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data="–ü–æ–¥–∞—Ä–∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")],
        [InlineKeyboardButton("–ü—Ä–∏—à–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="–ü—Ä–∏—à–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏")]
    ]
    await update.message.reply_text("üì¢ –û—Ç–∫—É–¥–∞ –≥–æ—Å—Ç–∏ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?", reply_markup=InlineKeyboardMarkup(source_keyboard))
    return STEP_SOURCE

async def source_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["source"] = query.data

    await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –≥–æ—Å—Ç–µ–π:")
    return STEP_ASSOCIATIONS

async def associations_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["associations"] = update.message.text
    await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return STEP_USER_NAME
async def username_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["user_name"] = update.message.text.strip()
    data = context.user_data

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤
    response = (
        f"üìã –û—Ç–∑—ã–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:\n\n"
        f"1.  –î–∞—Ç–∞: {data['date']}\n"
        f"2.  –ò–º–µ–Ω–∞ –≥–æ—Å—Ç–µ–π: {data['names']}\n"
        f"3.  –ú–µ—Å—Ç–∞: {data['places']}\n"
        f"4.  –í—Ä–µ–º—è —Å–µ—Ä–≤–∏—Å–∞: {data['time']}\n"
        f"5.  –°–ø–µ–∫—Ç–∞–∫–ª—å: {data['performance']}\n"
        f"    –û—Ç–∑—ã–≤: {data['review_text']}\n"
        f"6.  –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏: {data['source']}\n"
        f"7.  –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: {data['associations']}\n"
        f"8.  {data['user_name']}"
    )

    keyboard = [
        [InlineKeyboardButton("üîÅ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤", callback_data="new_review")]
    ]
    await update.message.reply_text(response, reply_markup=InlineKeyboardMarkup(keyboard))
    return ConversationHandler.END


async def new_review_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –æ—Ç–∑—ã–≤–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π)
    await query.message.delete()

    # –ü–æ–¥–º–µ–Ω–∏–º update.message, —á—Ç–æ–±—ã start() —Å—Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    fake_update = Update(
        update.update_id,
        message=query.message  # –ø–µ—Ä–µ–¥–∞—ë–º message –∏–∑ callback –≤ –≤–∏–¥–µ "message"
    )

    return await start(fake_update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def main():
    app = Application.builder().token(BOT_TOKEN).build()



    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            STEP_DATE: [CallbackQueryHandler(date_chosen)],
            STEP_NAMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, names_entered)],
            STEP_PLACES: [CallbackQueryHandler(places_chosen)],
            STEP_TIME: [CallbackQueryHandler(time_chosen)],
            STEP_PERFORMANCE_SELECT: [CallbackQueryHandler(performance_chosen)],
            STEP_REVIEW_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, review_text_entered)],
            STEP_SOURCE: [CallbackQueryHandler(source_chosen)],
            STEP_ASSOCIATIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, associations_entered)],
            STEP_USER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, username_entered)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    app.add_handler(CallbackQueryHandler(new_review_callback, pattern="^new_review$"))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
